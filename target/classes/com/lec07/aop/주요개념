------------------------------------------------------------
	스프링 AOP(Aspect Oriented Programming) : 관점지향 프로그래밍
		- 공통은 스프링 컨테이너에게 맡기고 개발자는 핵심 로직만 신경 씀 
------------------------------------------------------------
- Advice 	: What (공통기능)
- Target	: Advice가 적용될 객체 (핵심기능)
	- JoinPoint : n개 이상(like method..)
- Proxy : Advice를 Target객체에 적용하면 생성되는 객체 == 중개자
- PointCut	: Where n개 중 몇개만
- Aspect	: Advice(What) + PointCut(Where) => When
  Advisor
	- When[5] - before, after(finally) / 앞  AfterThrowing(except)
									   / 뒤  AfterReturning(try)
									   / 앞뒤 Around
- Weaving : 공통을 핵심에 적용하는 절차
		  : Target 객체에 Aspect를 적용해서 Proxy를 객체를 생성하는 절차
		  
------------------------------------------------------------
		Aspect 표기
------------------------------------------------------------
 expression="execution( _____________);
			 접근자 리턴타입 패키지.클래스.메소드명(매개변수타입)
			(public int com.lec06.aop.BoardDAO.insert (BoardVO) )"
			(public int com.lec06.aop.BoardDAO.insert (ReplyVO) )"
  			  ->(public int com.lec06.aop.BoardDAO.*insert(*VO) )"
  			
  			public List com.lec06.aop.BoardDAO.select()
  			public BoardVO com.lec06.aop.BoardDAO.selectOne(int)
  			  ->public * com.lec06.aop.BoardDAO.*(*)
  			
  			public List com.lec06.aop.BoardDAO.*(*)
  			  ->public * com.lec06.aop.BoardDAO.*(..) //(..)있어도 그만 없어도 그만
  
 			public BoardVO com.lec06.aop.BoardDAO.selectOne(int, int) //파라미터가 다수일 경우
  			  ->public * com.lec06.aop.BoardDAO.*(*,..)
  
  			public int 		com.lec06.aop.BoardDAO.insert (BoardVO)
			public int 		com.lec06.aop.BoardDAO.insert (ReplyVO)
			public BoardVO  com.lec06.aop.BoardDAO.selectOne(int, int)
  			public void 	com.lec01.sample.CallTest.myprint() 
  			---------------------------------------------------------
  			public * 		com.*.*.*DAO*.*(..) // 다 다른데 DAO만 같으면 *DAO*
  			
  			public int 		com.lec06.aop.BoardDAO.insert (BoardVO)
			public int 		com.lec06.aop.BoardDAO.insert (ReplyVO)
			public BoardVO  com.lec06.aop.BoardDAO.selectOne(int, int)
  			public void 	com.lec01.sample.DAOCallTest.myprint() 
  			public void		com.kosta.CallTest.myprint() // 2depth
  			---------------------------------------------------------
  			public * 		com..*.*(..) // depth가 다르면 모든 패키지를 가져오게 ..
		  
		  ex) execution(public Integer com.edu.aop.*.*(*))
		  	접근제어자 : public
		  	리턴타입 : Integer
		  	패키지 : com.edu.aop
		  	클래스 : 모든클래스
		  	메서드 : 리턴타입이 Integer인 모든 메서드
		  	파라미터: 1개
		  
		  ex) execution( * com.edu..*.get*(..))
		  	접근제어자 : 기본public
		  	리턴타입 : 모든타입
		  	패키지 : com.edu.뎁스무관
		  	클래스 : 모든클래스
		  	메서드 : get__()
		  	파라미터 : 0개 ~N개
		  	
		  ex) execution( * com.edu.aop..*service.*(..))
		  	접근제어자 : 기본public
		  	리턴타입 : 모든타입
		  	패키지 : com.edu.aop.뎁스무관
		  	클래스 : __service
		  	메서드 : 모든메서드
		  	파라미터 : 0개 ~N개
		  
		   ex) execution( * com.edu.aop.BoardService.*(..))
		  	접근제어자 : 기본public
		  	리턴타입 : 모든타입
		  	패키지 : com.edu.aop만
		  	클래스 : BoardService만
		  	메서드 : 모든메서드
		  	파라미터 : 0개 ~N개
		  
		  ex) execution( * some*(*, *)) <- 부적절 예시
		  	접근제어자 : 기본public
		  	리턴타입 : 모든타입
		  	패키지 : 없음
		  	클래스 : 없음
		  	메서드 : some___()
		  	파라미터 : 2개
		  
------------------------------------------------------------
	<AOP Proxy 적용 방식>
	JDK동적proxy(기본 왼쪽) vs CGLIB proxy -> 인터페이스 기반이냐 아니냐
------------------------------------------------------------		  
	JDK동적proxy(스프링 기본)
	 - 인터페이스를 구현한 객체에만 AOP를 적용되는 방식
	
	CGLIB proxy
	 - CGLIB(Code Generation Libery코드 생성 라이브러리로서 런타임에 동적으로 자바클래스	  
	 - 인터페이스가 없는 클래스 객체에 AOP를 적용 할 수 있는 방식	  

------------------------------------------------------------
	<AOP 설정 방식>
	스프링 : *@Annotation 기반
	POJO : 상속 받아 커스텀화
------------------------------------------------------------		  
	<aop:aspectj-autoproxy />
	:JDK동적 proxy 방식(인터페이스가 있는 클래스에 AOP사용)
	:스프링에서 AOP 사용하겠다 == @Aspect 기반으로 하는 자동 프록시 활성화
	:@Aspect가 붙은 클래스(=공통기능이 들어간 클래스)를 찾아 해당 bean을 proxy객체로 감싼다.	
	
	<aop:aspectj-autoproxy proxy-target-class="true" />  // CGLIB 라이브러리 jar파일이 있어야한다.
	:사전에 pom.xml에 추가 의존성 CGLIB.jar 설치 후 해당 설정 사용
	:proxy 생성 방식 지정
	:CGLIB proxy 방식을 사용하겠다. (인터페이스 없는 클래스에도 AOP 적용 가능)
	
	나머지 설정은 Annotation으로
	@Aspect
	@PointCut
	@Advice
	@Before
	@After
	@Around
	@AfterReturning
	@AfterThrowing
	
------------------------------------------------------------
	<AOP 설정 방식>
	스프링 : *XML기반
	POJO : 상속 받아 커스텀화
------------------------------------------------------------
<beans ~~~>
	//공통 기능 클래스를 인스턴스 초기화
	<bean id="MY_ADVICE_What_공통" class="com.lec04.di.board.MyOracleConnection" />
	<aop:config>
		<aop:aspect id="MY_What-Where-When" ref="MY_ADVICE_What_공통"> -> What-Advice : 공통-무엇을해야하는지
					-> Where-PointCut : 핵심로직의 어디에 적용
	    	<aop:pointcut id="MY_핵심로직_DAO메서드" expression="execution(public * com.lec04..*DAO.*(..))" /> 
	   				-> When: execution 실행시 (앞, 뒤, 앞뒤) 언제 실행할지 지정
	   		<aop:before pointcut-ref="MY_핵심로직_DAO메서드" method="OracleConn" /> -> Before : OracleConn
	   		<aop:after pointcut-ref="MY_핵심로직_DAO메서드" method="OracleClose" /> -> After : OracleClose
		</aop:aspect>
	</aop:config>
	
	//핵심 기능 클래스 인스턴스 초기화
	<bean id="boardService(부모타입 인스턴스)" class="com.lec04.di.board.BoardServiceImpl"/>
	// IF CGLIB방식이면?
	<bean id="boardDAO" class="com.lec04.di.board.BoardDAO"/>
</beans>

##################################################################################################
 - JDK 동적 프록시
##################################################################################################
  - java.lang.reflect.Proxy 클래스 사용 // reflect = 반영하다
  - 런타임에 인터페이스를 구현하는 프록시 객체를 동적으로 생성
  - 프록시 객체는 대상객체(target object)와 동일한 인터페이스를 구현하며, 메서드 호출을 가로채어 추가기능(Advice)을 수행
  - 빈을 주입받을 때 실제 빈 대신 프록시 객체가 반환 -- 프록시가 Impl(target class)의 메서드 호출을 가로채어 어드바이스 적용
  
  1) AOP 설정
  		: 애스펙트(Aspect : what where when) / 
  		  어드바이스(Advice : what) + PointCut(where) 정의
  		
		@Configuration
		@EnableAspectJAutoProxy  //AnnotationAwareAspectJAutoProxyCreator라는 빈 후처리기(Bean Post Processor)를 등록
								 //애플리케이션 컨텍스트에 정의된 빈을 스캔하여 AOP 관련 설정을 적용
		public class AppConfig {
		    @Bean
		    public MyAspect myAspect() {
		        return new MyAspect();
		    }
		
		    @Bean
		    public MyService myService() {
		        return new MyServiceImpl();
		    }
		}

  2) 빈 후처리기 등록 @EnableAspectJAutoProxy 
  		: 스프링 컨텍스트는 AnnotationAwareAspectJAutoProxyCreator라는 빈 후처리기(Bean Post Processor)를 등록
  		               --> 빈을 스캔하여 AOP관련 설정 적용
  		               
  3) 프록시 생성  
  		: 빈 후처리기는 빈이 초기화될 때 인터페이스 기반 프록시를 생성
          a) 초기화 후처리	: 빈이 초기화 후, AnnotationAwareAspectJAutoProxyCreator는 해당 빈이 AOP 대상인지 검사
		  b) 프록시 생성 	: 대상 빈이 AOP 대상인 경우, JDK 동적 프록시를 사용하여 인터페이스 기반 프록시 객체 생성
		
		MyService proxy = (MyService) Proxy.newProxyInstance(
		    MyService.class.getClassLoader(),    --- 인터페이스 로드
		    new Class<?>[] { MyService.class },  --- 동일한 객체 동적 생성 
		    new MyInvocationHandler(target)      --- 메서드 가로채기 invoke()오버라이딩해 어드바이스 로직 수행
		);
		
  4) InvocationHandler 구현
  	    : 프록시 객체는 메서드 호출을 가로채기 위해 InvocationHandler 사용
        : invoke 메서드를 구현하여 실제 대상 객체의 메서드를 호출하기 전에 어드바이스 로직 수행
        
        public class MyInvocationHandler implements InvocationHandler {
		    private final Object target;
		    public MyInvocationHandler(Object target) {
		        this.target = target;
		    }
		
		    @Override
		    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		        // Before advice
		        System.out.println("Before method: " + method.getName());
		
		        // Invoke actual method on target
		        Object result = method.invoke(target, args); // target method를 호출
		
		        // After advice
		        System.out.println("After method: " + method.getName());
		
		        return result;
		    }
		}
  5) 프록시 객체 반환
	  : 프록시 객체는 스프링 컨텍스트에 의해 관리
	  : 클라이언트 코드가 빈을 주입받을 때 실제 빈 대신 프록시 객체가 반환
	  : 이 프록시 객체는 메서드 호출을 가로채어 어드바이스를 적용
	  
	  
	   //--------------------------------------------------------------------------- 
	   // 스프링 AOP는 JDK 동적 프록시를 사용하여 인터페이스 기반 프록시를 생성하고, 이를 통해 AOP 기능을 제공
	   // MyServiceImpl 객체 대신 프록시 객체를 생성하여 빈으로 등록
	   // 이 프록시 객체는 performTask 메서드 호출을 가로채어 어드바이스 적용
	   //---------------------------------------------------------------------------
	    public interface MyService {
		    void performTask();
		}
		
		public class MyServiceImpl implements MyService { // target MyServiceImpl
		    @Override
		    public void performTask() { // performTask -> target class
		        System.out.println("Executing task...");
		    }
		}
		
		@Aspect
		public class MyAspect {
		    @Before("execution(* com.example.MyService.performTask(..))")
		    public void beforeTask(JoinPoint joinPoint) {
		        System.out.println("Before task: " + joinPoint.getSignature().getName());
		    }
		
		    @After("execution(* com.example.MyService.performTask(..))")
		    public void afterTask(JoinPoint joinPoint) {
		        System.out.println("After task: " + joinPoint.getSignature().getName());
		    }
		}

##################################################################################################  		
  - CGLIB(바이트코드를 조작하여 런타임에 새로운 클래스를 생성할 수 있게 해주는 라이브러리) 프록시 사용  
##################################################################################################  
  - 인터페이스를 구현하지 않는 클래스에도 프록시 적용
  - JDK 동적 프록시보다 약간 더 높은 성능
  - 추가 의존성: CGLIB.jar 추가  (대부분의 스프링 배포판에는 CGLIB가 포함)
  - 상속 기반: 상속을 기반으로 프록시를 생성하므로, final로 선언된 메서드는 프록시화할 수 없다
  
  대상 클래스의 서브클래스를 생성하고, 메서드 호출을 가로채어 추가 기능(Advice)을 수행
  
    1)  AOP 설정
    	@Configuration
		@EnableAspectJAutoProxy(proxyTargetClass = true)
		public class AppConfig {
		    @Bean
		    public MyAspect myAspect() {
		        return new MyAspect();
		    }
		
		    @Bean
		    public MyService myService() {
		        return new MyService();
		    }
		}

  2) 빈 후처리기 등록 @EnableAspectJAutoProxy(proxyTargetClass = true)
  		: 스프링 컨텍스트는 AnnotationAwareAspectJAutoProxyCreator라는 빈 후처리기(Bean Post Processor)를 등록
  		               --> 빈을 스캔하여 AOP관련 설정 적용

  3) 프록시 생성  
  		: 빈 후처리기는 빈이 초기화될 때 CGLIB를 사용하여 클래스 기반 프록시 객체를 생성
          a) 초기화 후처리	: 빈이 초기화 후, AnnotationAwareAspectJAutoProxyCreator는 해당 빈이 AOP 대상인지 검사
		  b) 프록시 생성 	: 대상 빈이 AOP 대상인 경우, GLIB를 사용하여 클래스 기반 프록시 객체를 생성
		
		
		★★★★★  CGLIB는 대상 클래스를 상속받아 (서브클래스를 동적으로 생성) ★★★★★★
		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(MyService.class);  ★★핵심------------- (부모Service클래스 상속받아 차일드클래스 동적 생성)
		enhancer.setCallback(new MyMethodInterceptor(target));  ---- 메서드 호출을 가로채고 어드바이스 로직 적용
		MyService proxy = (MyService) enhancer.create();
		
  4) MethodInterceptor 구현
  	    : 프록시 객체는 메서드 호출을 가로채기 위해 MethodInterceptor 사용
        : intercept 메서드를 구현하여 실제 대상 객체의 메서드를 호출하기 전에 어드바이스 로직 수행
        
        public class MyMethodInterceptor implements MethodInterceptor {
		    private final Object target;
		    public MyMethodInterceptor(Object target) {
		        this.target = target;
		    }
		
		    @Override
		  //public Object invoke   (Object proxy, Method method, Object[] args)                    throws Throwable {
		    public Object intercept(Object obj,   Method method, Object[] args, MethodProxy proxy) throws Throwable {
		        // Before advice
		        System.out.println("Before method: " + method.getName());
		
		        // Invoke actual method on target
		     // Object result = method.invoke(target, args);
		        Object result = proxy.invoke (target, args); // ★★핵심
		        
		        // After advice
		        System.out.println("After method: " + method.getName());
		
		        return result;
		    }
		}
		
  5) 프록시 객체 반환
	  : 프록시 객체는 스프링 컨텍스트에 의해 관리
	  : 클라이언트 코드가 빈을 주입받을 때 실제 빈 대신 프록시 객체가 반환
	  : 이 프록시 객체는 메서드 호출을 가로채어 어드바이스를 적용
	  		
	  		
	  //--------------------------------------------------------------------------- 
	  // MyService 클래스는 인터페이스를 구현하지 않습니다. 
	  // MyAspect 클래스는 해당 서비스 메서드의 전후에 실행될 어드바이스를 정
	  // 스프링은 MyService 객체 대신 CGLIB를 사용하여 프록시 객체를 생성하고, 이를 빈으로 등록합니다. 
	  // 이 프록시 객체는 performTask 메서드 호출을 가로채어 어드바이스를 적용
	  //---------------------------------------------------------------------------
	  //public interface MyService {
	  //	void performTask();
	  //}
		
	  //public class MyServiceImpl implements MyService {
	  // @Override	
		public class MyService {
		    public void performTask() {
		        System.out.println("Executing task...");
		    }
		}
		
		@Aspect
		public class MyAspect {
		    @Before("execution(* com.example.MyService.performTask(..))")
		    public void beforeTask(JoinPoint joinPoint) {
		        System.out.println("Before task: " + joinPoint.getSignature().getName());
		    }
		
		    @After("execution(* com.example.MyService.performTask(..))")
		    public void afterTask(JoinPoint joinPoint) {
		        System.out.println("After task: " + joinPoint.getSignature().getName());
		    }
		}	 		  
		  
		  AOP dependency
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- AOP -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.6.11</version>
		</dependency>
		
		<!-- cglib -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2</version>
		</dependency>
		  
		  
		  
		  
		  
		  
		  
		  
		  